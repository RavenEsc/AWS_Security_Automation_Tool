######################################################################
#                         PRIMARY LAMBDA                             #
######################################################################
module "lambda" {
  source = "terraform-aws-modules/lambda/aws"
  version = "6.0.0"

  function_name     = "lambda-sat-ec2"
  description       = "Checks for public facing ec2 instances"
  handler           = "index.lambda_handler"
  runtime           = var.py_runtime
  source_code_hash  = data.archive_file.lambda_archive_file.output_base64sha256
  source_path       = data.archive_file.lambda_archive_file.output_path
  role              = aws_iam_role.lambda_role.arn
  environment_variables = {
    SNS_TOPIC_ARN = var.sns_topic_arn
    anum = local.account_id
  }

  tags = {
    Name = "my-lambda1"
  }
}

data "archive_file" "lambda_archive_file" {
  type        = "zip"
  source_file = "index.py"
  output_path = "lambda_function_payload.zip"
}

######################################################################
#                            LAMBDA IAM                              #
######################################################################

resource "aws_iam_role" "lambda_role" {
  name               = "Lambda_role"
  assume_role_policy = data.aws_iam_policy_document.main_lambda_policy.json
}

resource "aws_iam_role_policy" "SNS_role-policy" {
  name   = "sns-topic-role-access"
  role   = aws_iam_role.lambda_role.id
  policy = aws_iam_policy.sns_lambda_policy.policy
}

data "aws_iam_policy_document" "main_lambda_policy" {
  statement {
    effect = "Allow"
    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
    actions = ["sts:AssumeRole"]
  }
}

resource "aws_iam_policy" "sns_lambda_policy" {
  name        = "sns-topic-access-policy"
policy {
    policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "sns:Publish",
      "Resource": "arn:aws:sns:${var.reg}:${local.account_id}:${var.sns_topic_arn}"
    }
  ]
}
EOF
  }
}

######################################################################
#                            EVENTBRIDGE                             #
######################################################################

module "eventbridge" {
  source = "terraform-aws-modules/eventbridge/aws"

  bus_name = "Lambda_Trigger_Scheduler" # "default" bus already support schedule_expression in rules

  attach_lambda_policy = true
  lambda_target_arns   = ["arn:aws:lambda:${var.reg}:${local.account_id}:function:${module.lambda.function_name}"]

  schedules = {
    lambda-cron = {
      description         = "Trigger for a Lambda"
      schedule_expression = "rate(1 day)"
      timezone            = "America/Chicago"
      arn                 = "arn:aws:lambda:${var.reg}:${local.account_id}:function:${module.lambda.function_name}"
      input               = jsonencode({ "job" : "cron-by-rate" })
    }
  }
}

######################################################################
#                            FAN-OUT                                 #
######################################################################

###RESOURCES###
resource "aws_sns_topic" "orders" {
  name = "orders-topic"
}

resource "aws_sqs_queue" "orders_to_process" {
  name                       = "orders-to-process-queue"
  receive_wait_time_seconds  = 20
  message_retention_seconds  = 18400
}

resource "aws_sqs_queue" "orders_to_notify" {
  name                       = "orders-to-notify-queue"
  receive_wait_time_seconds  = 20
  message_retention_seconds  = 18400
}

###SUBSCRIPTIONS###

resource "aws_sns_topic_subscription" "orders_to_process_subscription" {
  protocol             = "sqs"
  raw_message_delivery = true
  topic_arn            = aws_sns_topic.orders.arn
  endpoint             = aws_sqs_queue.orders_to_process.arn
}

resource "aws_sns_topic_subscription" "orders_to_notify_subscription" {
  protocol             = "sqs"
  raw_message_delivery = true
  topic_arn            = aws_sns_topic.orders.arn
  endpoint             = aws_sqs_queue.orders_to_notify.arn
}

###PERMISSIONS###

resource "aws_sqs_queue_policy" "orders_to_process_subscription" {
  queue_url = aws_sqs_queue.orders_to_process.id

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Action": [
        "sqs:ReceiveMessage"
      ],
      "Resource": [
        "${aws_sqs_queue.orders_to_process.arn}"
      ],
      "Condition": {
        "ArnEquals": {
          "aws:SourceArn": "${module.lambda_s3.lambda_function_arn}"
        }
      }
    },
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "sns.amazonaws.com"
      },
      "Action": [
        "sqs:SendMessage"
      ],
      "Resource": [
        "${aws_sqs_queue.orders_to_process.arn}"
      ],
      "Condition": {
        "ArnEquals": {
          "aws:SourceArn": "${aws_sns_topic.orders.arn}"
        }
      }
    }
  ]
}
EOF
}


resource "aws_sqs_queue_policy" "orders_to_notify_subscription" {
  queue_url = aws_sqs_queue.orders_to_notify.id
  policy    = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Action": [
        "sqs:ReceiveMessage"
      ],
      "Resource": [
        "${aws_sqs_queue.orders_to_notify.arn}"
      ],
      "Condition": {
        "ArnEquals": {
          "aws:SourceArn": "${module.lambda_Discord.lambda_function_arn}"
        }
      }
    },
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "sns.amazonaws.com"
      },
      "Action": [
        "sqs:SendMessage"
      ],
      "Resource": [
        "${aws_sqs_queue.orders_to_notify.arn}"
      ],
      "Condition": {
        "ArnEquals": {
          "aws:SourceArn": "${aws_sns_topic.orders.arn}"
        }
      }
    }
  ]
}
EOF
}

######################################################################
#                                S3                                  #
######################################################################

module "s3_bucket" {
  source = "terraform-aws-modules/s3-bucket/aws"

  bucket = var.s3_bucket_name
  acl    = "private"

  control_object_ownership = true
  object_ownership         = "ObjectWriter"

  versioning = {
    enabled = true
  }
}

# Check for potential issues POLICYs3
resource "aws_s3_bucket_policy" "s3_bucket_policy" {
  bucket = var.s3_bucket_name

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "AllowLambdaToSendObjects",
      "Effect": "Allow",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Action": [
        "s3:PutObject"
      ],
      "Resource": "arn:aws:s3:::${var.s3_bucket_name}/*"
    }
  ]
}
EOF
}

######################################################################
#                            S3 LAMBDA                               #
######################################################################

module "lambda_s3" {
  source = "terraform-aws-modules/lambda/aws"

  function_name = "lambda-sat-s3"
  description   = "Sends messages as logs from SQS Queue to an S3 bucket"
  handler       = "index2.lambda_handler"
  runtime       = var.py_runtime
  role          = aws_iam_role.lambda_role_s3.arn

  source_path = "/index2.py"
  event_source_mapping = {
    event_source_arn = aws_sqs_queue.orders_to_process.arn
    starting_position = "LATEST"
  }
  environment_variables = {
    buck_lm = var.s3_bucket_name
  }
  tags = {
    Name = "my-lambda2"
  }
}

#########IAM########

resource "aws_iam_role" "lambda_role_s3" {
  name               = "Lambda_role_s3"
  assume_role_policy = data.aws_iam_policy_document.s3_lambda_policy.json
}

data "aws_iam_policy_document" "s3_lambda_policy" {
  statement {
    effect = "Allow"
    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
    actions = ["sts:AssumeRole"]
  }
}
# Check for potential issues POLICYs3
resource "aws_iam_role_policy" "s3-role-policy" {
  name   = "s3-role-access"
  role   = aws_iam_role.lambda_role_s3.id
  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "AllowLambdaToAccessBucket",
      "Effect": "Allow",
      "Action": [
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::${var.s3_bucket_name}",
        "arn:aws:s3:::${var.s3_bucket_name}/*"
      ]
    }
  ]
}
EOF
}

######################################################################
#                         DISCORD LAMBDA                             #
######################################################################

module "lambda_Discord" {
  source = "terraform-aws-modules/lambda/aws"

  function_name = "lambda-sat-discord"
  description   = "Sends messages as notifications from the SQS Queue to Discord Webhook Bot"
  handler       = "index3.lambda_handler"
  runtime       = var.py_runtime

  source_path = "/index3.py"

  layers = [
    module.lambda_layer_discord.lambda_layer_arn,
  ]

  tags = {
    Name = "my-lambda3"
  }
}

module "lambda_layer_discord" {
  source = "terraform-aws-modules/lambda/aws"

  create_layer = true

  layer_name          = "lambda-layer-discord"
  description         = "lambda layer "
  compatible_runtimes = [var.py_runtime]

  source_path = "/Discord-Webhook-Dependencies.zip"
}